' //////////////////////////////////////////////////////////////
' // <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
' //////////////////////////////////////////////////////////////
' Code Is generated On: 
' Code Is generated Using templates: SD.TemplateBindings.SharedTemplates
' Templates vendor: Solutions Design.
' //////////////////////////////////////////////////////////////
Imports System
Imports System.Collections.Generic
Imports System.Data.Common
Imports System.Linq
Imports System.Threading
Imports System.Threading.Tasks
Imports SD.LLBLGen.Pro.ORMSupportClasses
Imports SD.LLBLGen.Pro.DQE.SqlServer


' __LLBLGENPRO_USER_CODE_REGION_START AdditionalNamespaces
' __LLBLGENPRO_USER_CODE_REGION_END
Namespace DAL.DatabaseSpecific
	''' <summary>Data access adapter Class, which controls the complete database interaction With the database For all objects.</summary>
	''' <remarks>Use a DataAccessAdapter Object solely per thread, And per connection. A DataAccessAdapter Object contains 1 active connection 
	''' And no thread-access scheduling code. This means that you need To create a New DataAccessAdapter Object If you want To utilize
	''' In another thread a New connection And a New transaction Or want To open a New connection.</remarks>
	Public Class DataAccessAdapter
		Inherits DataAccessAdapterBase

		''' <summary>The name Of the key In the *.config file Of the executing application which contains the connection String.</summary>
		''' <remarks>Default: the value Set In the LLBLGen Pro project properties</remarks>
		Public Shared ConnectionStringKeyName As String ="ConnectionString.SQL Server (SqlClient)"

		''' <summary>CTor</summary>
		Public Sub New()
			Me.New(ReadConnectionStringFromConfig(), False, CType(Nothing, CatalogNameOverwriteHashtable), Nothing)
		End Sub

		''' <summary>CTor</summary>
		''' <param name="keepConnectionOpen">when True, the DataAccessAdapter will Not close an opened connection. Use this For multi action usage.</param>
		Public Sub New(keepConnectionOpen As Boolean)
			Me.New(ReadConnectionStringFromConfig(), keepConnectionOpen, CType(Nothing, CatalogNameOverwriteHashtable), Nothing)
		End Sub

		''' <summary>CTor</summary>
		''' <param name="connectionString">The connection String To use when connecting To the database.</param>
		Public Sub New(connectionString As String)
			Me.New(connectionString, False, CType(Nothing, CatalogNameOverwriteHashtable), Nothing)
		End Sub

		''' <summary>CTor</summary>
		''' <param name="connectionString">The connection String To use when connecting To the database.</param>
		''' <param name="keepConnectionOpen">when True, the DataAccessAdapter will Not close an opened connection. Use this For multi action usage.</param>
		Public Sub New(connectionString As String, keepConnectionOpen As Boolean)
			Me.New(connectionString, keepConnectionOpen, CType(Nothing, CatalogNameOverwriteHashtable), Nothing)
		End Sub
		
		''' <summary>CTor.</summary>
		''' <param name="connectionString">The connection String To use when connecting To the database.</param>
		''' <param name="keepConnectionOpen">when True, the DataAccessAdapter will Not close an opened connection. Use this For multi action usage.</param>
		''' <param name="catalogNameUsageSetting"> Configures this data access adapter Object how To threat catalog names In persistence information.</param>
		''' <param name="catalogNameToUse"> The name To use If catalogNameUsageSetting Is Set To ForceName. Ignored otherwise.</param>
		''' <remarks>For backwards compatibility.</remarks>
		Public Sub New(connectionString As String, keepConnectionOpen As Boolean, catalogNameUsageSetting As CatalogNameUsage, catalogNameToUse As String) 
			MyBase.New(PersistenceInfoProviderSingleton.GetInstance())
			InitClassPhase2(connectionString, keepConnectionOpen, catalogNameUsageSetting, SchemaNameUsage.Default, catalogNameToUse, String.Empty, Nothing, Nothing)
		End Sub

		''' <summary>CTor</summary>
		''' <param name="connectionString">The connection String To use when connecting To the database.</param>
		''' <param name="keepConnectionOpen">when True, the DataAccessAdapter will Not close an opened connection. Use this For multi action usage.</param>
		''' <param name="schemaNameUsageSetting">Configures this data access adapter Object how To threat schema names In persistence information.</param>
		''' <param name="schemaNameToUse">Oracle specific. The name To use If schemaNameUsageSetting Is Set To ForceName. Ignored otherwise.</param>
		Public Sub New(connectionString As String, keepConnectionOpen As Boolean, schemaNameUsageSetting As SchemaNameUsage, schemaNameToUse As String) 
			MyBase.New(PersistenceInfoProviderSingleton.GetInstance())
			InitClassPhase2(connectionString, keepConnectionOpen, CatalogNameUsage.Default, schemaNameUsageSetting, String.Empty, schemaNameToUse, Nothing, Nothing)
		End Sub

		''' <summary>CTor.</summary>
		''' <param name="connectionString">The connection String To use when connecting To the database.</param>
		''' <param name="keepConnectionOpen">when True, the DataAccessAdapter will Not close an opened connection. Use this For multi action usage.</param>
		''' <param name="catalogNameOverwrites"> The From-To name value pairs And setting For the overwriting Of catalog names. Can be Nothing.</param>
		''' <param name="schemaNameOverwrites"> The From-To name value pairs And setting For the overwriting Of schema names. Can be Nothing.</param>
		Public Sub New(connectionString As String, keepConnectionOpen As Boolean, catalogNameOverwrites As CatalogNameOverwriteHashtable, schemaNameOverwrites As SchemaNameOverwriteHashtable) 
			MyBase.New(PersistenceInfoProviderSingleton.GetInstance())
			InitClassPhase2(connectionString, keepConnectionOpen, CatalogNameUsage.Default, SchemaNameUsage.Default, String.Empty, String.Empty, catalogNameOverwrites, schemaNameOverwrites)
		End Sub

		''' <summary>Sets the flag to signal the SqlServer DQE to generate SET ARITHABORT ON statements prior to INSERT, DELETE and UPDATE Queries.
		''' Keep this flag to false in normal usage, but set it to true if you need to write into a table which is part of an indexed view.
		''' It will not affect normal inserts/updates that much, leaving it on is not harmful. See Books online for details on SET ARITHABORT ON.
		''' After each statement the setting is turned off if it has been turned on prior to that statement.</summary>
		''' <remarks>Setting this flag is a global change.</remarks>
		Public Shared Sub SetArithAbortFlag(value As Boolean)
			DynamicQueryEngine.ArithAbortOn = value
		End Sub
		
		''' <summary>Sets the default compatibility level used by the DQE. Default is SqlServer2005. This is a global setting.
		''' Compatibility level influences the query generated For paging, sequence name (@@IDENTITY/SCOPE_IDENTITY()), And usage Of newsequenceid() In inserts. 
		''' It also influences the ado.net provider To use. This way you can switch between SqlServer server client 'SqlClient' and SqlServer CE Desktop.</summary>
		''' <remarks>Setting this Property will overrule a similar setting In the .config file. Don't set this property when queries are executed as
		''' it might switch factories For ADO.NET elements which could result In undefined behavior so Set this Property at startup Of your application</remarks>
		Public Shared Sub SetSqlServerCompatibilityLevel(compatibilityLevel As SqlServerCompatibilityLevel)
			DynamicQueryEngine.DefaultCompatibilityLevel = compatibilityLevel
		End Sub 

		''' <summary>Creates a New Dynamic Query engine Object And passes In the defined catalog/schema overwrite hashtables.</summary>
		Protected Overrides Function CreateDynamicQueryEngine() As DynamicQueryEngineBase 
			Return Me.PostProcessNewDynamicQueryEngine(New DynamicQueryEngine())
		End Function

		''' <summary>Reads the value Of the setting With the key ConnectionStringKeyName From the *.config file And stores that value As the active connection String To use For this Object.</summary>
		''' <returns>connection String read</returns>
		Private Shared Function ReadConnectionStringFromConfig() As String
#If NETSTANDARD Or NETCOREAPP Then
			Return RuntimeConfiguration.GetConnectionString(ConnectionStringKeyName)
#Else
			Return ConfigFileHelper.ReadConnectionStringFromConfig(ConnectionStringKeyName)
#End If
		End Function

		''' <summary>Sets the per instance compatibility level On the dqe instance specified.</summary>
		''' <param name="dqe">The dqe.</param>
		Protected Overrides Sub SetPerInstanceCompatibilityLevel(dqe As DynamicQueryEngineBase)
			If _compatibilityLevel.HasValue Then
				CType(dqe, DynamicQueryEngine).CompatibilityLevel = _compatibilityLevel.Value
			End If
		End Sub

		Private _compatibilityLevel As Nullable(Of SqlServerCompatibilityLevel) = Nothing
		
		''' <summary>The per-instance compatibility level used by this DQE instance. Default Is the one Set globally, which Is by Default SqlServer2005 (For 2005+). 
		''' Compatibility level influences the query generated For paging, sequence name (@@IDENTITY/SCOPE_IDENTITY()), And usage Of newsequenceid() In inserts. 
		''' It also influences the ado.net provider To use. This way you can switch between SqlServer server client 'SqlClient' and SqlServer CE Desktop.</summary>
		Public Property CompatibilityLevel As Nullable(Of SqlServerCompatibilityLevel)
			Get 
				Return _compatibilityLevel
			End Get
			Set 
				_compatibilityLevel = value
			End Set
		End Property 

		' __LLBLGENPRO_USER_CODE_REGION_START CustomDataAccessAdapterCode
		' __LLBLGENPRO_USER_CODE_REGION_END

	End Class
End Namespace
