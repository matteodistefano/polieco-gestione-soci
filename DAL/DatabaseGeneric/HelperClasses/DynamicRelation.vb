'//////////////////////////////////////////////////////////////
'// <auto-generated>This code was generated by LLBLGen Pro 5.9.</auto-generated>
'//////////////////////////////////////////////////////////////
'// Code is generated on: 
'// Code is generated Imports templates: SD.TemplateBindings.SharedTemplates
'// Templates vendor: Solutions Design.
'//////////////////////////////////////////////////////////////
Imports System
Imports DAL.FactoryClasses
Imports DAL.HelperClasses
Imports SD.LLBLGen.Pro.ORMSupportClasses

Namespace DAL.RelationClasses

	''' <summary>
	''' Class to define dynamic relations for queries. 
	''' </summary>
	<Serializable()> _
	Public Class DynamicRelation 
		Inherits DynamicRelationBase
	
		''' <summary>Initializes a new instance of the <see cref="DynamicRelation"/> class.</summary>
		''' <param name="leftOperand">The left operand, which can only be a derived table definition. No join will take place. </param>
		''' <remarks>If a DynamicRelation is created with this CTor, it has to be the only one. It will be ignored if there are more relations in the relation collection.</remarks>
		Public Sub New(leftOperand As DerivedTableDefinition)
			Me.InitClass(JoinHint.None, String.Empty, String.Empty, Nothing, leftOperand, Nothing)
		End Sub
	
		''' <summary>Initializes a new instance of the <see cref="DynamicRelation"/> class.</summary>
		''' <param name="leftOperand">The left operand.</param>
		''' <param name="joinType">Type of the join. If None is specified, Inner is assumed.</param>
		''' <param name="rightOperand">The right operand.</param>
		''' <param name="onClause">The on clause for the join.</param>
		Public Sub New(leftOperand As DerivedTableDefinition, joinType As JoinHint, rightOperand As DerivedTableDefinition, onClause As IPredicate)
			Me.InitClass(joinType, String.Empty, String.Empty, onClause, leftOperand, rightOperand)
		End Sub

		''' <summary>Initializes a new instance of the <see cref="DynamicRelation"/> class.</summary>
		''' <param name="leftOperand">The left operand which is a field.</param>
		''' <param name="joinType">Type of the join. If None is specified, Inner is assumed.</param>
		''' <param name="rightOperand">The right operand which is a derived table.</param>
		''' <param name="aliasLeftOperand">The alias of the left operand. If you don't want to / need to alias the left operand (only alias if you have to), specify string.Empty.</param>
		''' <param name="onClause">The on clause for the join.</param>
		Public Sub New(leftOperand As IEntityFieldCore, joinType As JoinHint, rightOperand As DerivedTableDefinition, aliasLeftOperand As String, onClause As IPredicate)
			Me.InitClass(joinType, aliasLeftOperand, string.Empty, onClause, leftOperand, rightOperand)
		End Sub	

		''' <summary>
		''' Initializes a new instance of the <see cref="DynamicRelation"/> class.
		''' </summary>
		''' <param name="leftOperand">The left operand.</param>
		''' <param name="joinType">Type of the join. If None is specified, Inner is assumed.</param>
		''' <param name="rightOperand">The right operand which is an entity type.</param>
		''' <param name="aliasRightOperand">The alias of the right operand. If you don't want to / need to alias the right operand (only alias if you have to), specify
		''' string.Empty.</param>
		''' <param name="onClause">The on clause for the join.</param>
		Public Sub New(leftOperand As DerivedTableDefinition, joinType As JoinHint, rightOperand As DAL.EntityType, aliasRightOperand As String, onClause As IPredicate)
			Me.InitClass(joinType, String.Empty, aliasRightOperand, onClause, leftOperand, GeneralEntityFactory.Create(rightOperand))
		End Sub
	
		''' <summary>Initializes a new instance of the <see cref="DynamicRelation"/> class.</summary>
		''' <param name="leftOperand">The left operand, which is an entity.</param>
		''' <param name="joinType">Type of the join. If None is specified, Inner is assumed.</param>
		''' <param name="rightOperand">The right operand which is an entity.</param>
		''' <param name="aliasLeftOperand">The alias of the left operand. If you don't want to / need to alias the left operand (only alias if you have to), specify
		''' string.Empty.</param>
		''' <param name="aliasRightOperand">The alias of the right operand. If you don't want to / need to alias the right operand (only alias if you have to), specify
		''' string.Empty.</param>
		''' <param name="onClause">The on clause for the join.</param>
		Public Sub New(leftOperand As DAL.EntityType, joinType As JoinHint, rightOperand As DAL.EntityType, aliasLeftOperand As String, aliasRightOperand As String, onClause As IPredicate)
			Me.InitClass(joinType, aliasLeftOperand, aliasRightOperand, onClause, GeneralEntityFactory.Create(leftOperand), GeneralEntityFactory.Create(rightOperand))
		End Sub
		
		''' <summary>Initializes a new instance of the <see cref="DynamicRelation"/> class.</summary>
		''' <param name="leftOperand">The left operand which is a field.</param>
		''' <param name="joinType">Type of the join. If None is specified, Inner is assumed.</param>
		''' <param name="rightOperand">The right operand which is an entity.</param>
		''' <param name="aliasLeftOperand">The alias of the left operand. If you don't want to / need to alias the left operand (only alias if you have to), specify string.Empty.</param>
		''' <param name="aliasRightOperand">The alias of the right operand. If you don't want to / need to alias the right operand (only alias if you have to), specify string.Empty.</param>
		''' <param name="onClause">The on clause for the join.</param>
		Public Sub New (leftOperand As IEntityFieldCore, joinType As JoinHint, rightOperand As DAL.EntityType, aliasLeftOperand As String, aliasRightOperand As String, onClause As IPredicate)
			Me.InitClass(joinType, aliasLeftOperand, aliasRightOperand, onClause, leftOperand, GeneralEntityFactory.Create(rightOperand))
		End Sub		

		''' <inheritdoc/>
		Protected Overrides Function GetInheritanceProvider() As IInheritanceInfoProvider 
			Return ModelInfoProviderSingleton.GetInstance()
		End Function
	End Class
End Namespace